name: Regular Checks
on: push
jobs:
  wait-for-publish:
    name: Wait for Gazel Package Deploy
    runs-on: ubuntu-latest
    outputs:
      # Version number that is parsed from empty/*.App.Servie.csproj
      version: ${{ steps.parse.outputs.version }}
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: |
            6.0.x
      - name: Checkout Gazel Sample
        uses: actions/checkout@v2
      - name: Parse Version
        id: parse
        run: |
          # 1. cat outputs content of Inventiv.Sample.App.Service.csproj file to stream editor (sed)
          # 2. first sed removes all lines except with Version info
          # 3. second sed removes roughness outside the version number
          # 4. third sed removes first dot on version number
          # 5. result is only version which is set to the $version variable
          version=$(cat empty/src/Inventiv.Sample.App.Service/Inventiv.Sample.App.Service.csproj | sed -n '/Version/p' | sed '/[ \"<>=a-zA-Z\/]/ s///g' | sed 's/^.//')
          # value of $version is set as a step output
          echo "version="$version >> $GITHUB_OUTPUT
      - name: Nuget check
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 70
          max_attempts: 15
          polling_interval_seconds: 60
          command: |
            if wget -q --method=HEAD https://api.nuget.org/v3-flatcontainer/Gazel/${{ steps.parse.outputs.version }}/Gazel.nuspec
            then
              echo "Nuget onaylandÄ±!"
              cd to-do;dotnet restore -v n
            else
              exit 1
            fi
  build-and-test:
    name: Build & Test
    needs: wait-for-publish
    strategy:
      max-parallel: 2
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: |
            5.0.x
            6.0.x
      - name: empty
        working-directory: empty
        run: |
          dotnet build -c Release
          dotnet test -c Release
      - name: tutorial/hello-world
        working-directory: tutorial/hello-world
        run: |
          dotnet build -c Release
          dotnet test -c Release
      - name: tutorial/persistent-classes
        working-directory: tutorial/persistent-classes
        run: |
          dotnet build -c Release
          dotnet test -c Release
      - name: tutorial/database-transactions
        working-directory: tutorial/database-transactions
        run: |
          dotnet build -c Release
          dotnet test -c Release
      - name: tutorial/query-classes
        working-directory: tutorial/query-classes
        run: |
          dotnet build -c Release
          dotnet test -c Release
      - name: tutorial/rest-api
        working-directory: tutorial/rest-api
        run: |
          dotnet build -c Release
          dotnet test -c Release
      - name: todo
        working-directory: to-do
        run: |
          dotnet build -c Release
          dotnet test -c Release
